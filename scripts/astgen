#!/usr/bin/python

import os, sys
from astgen import astgen, utils
from optparse import OptionParser

def parse_options():
    parser = OptionParser()
    parser.add_option("-o", "--outputdir", dest = "outputdir", metavar = "OUTPUTDIR", default = "",
                      help = "The output folder in which all generted files are written to.")
    parser.add_option("-c", "--backend_class", dest = "backend", metavar = "BACKEND", 
                      help = "The backend to generate code for, eg cpp, java, python etc")
    parser.add_option("-b", "--backend_config", dest = "backend_config", metavar = "BACKEND_CONFIG", 
                      help = "Backend specific configs to be provided for the code generator.")
    parser.add_option("-m", "--modelfile", dest = "model_file", metavar = "MODEL_FILE", 
                      help = "Input model file containing AST definitions for which AST code is to be generated.")
    (options, args) = parser.parse_args()
    options.outputdir = options.outputdir.strip()
    if options.outputdir and otions.output.dir not in [".", "..", "./", "../"]:
        if not os.path.isdir(options.outputdir):
            os.path.makedirs(options.outputdir)
    if not options.model_file:
        parser.error("Model file parameter is mandatory")
    if not options.backend:
        parser.error("""
        Backend parameter is mandatory.  Built in options are (you can provide your own):

        astgen.backends.SingieFileBackend
        astgen.backends.TwoFilesBackend
        """)
    return options, args

if __name__ == "__main__":
    options, args = parse_options()

    nodes = utils.load_nodes_from_file(options.model_file)

    backend = options.backend.split(".")
    backendClass = getattr(utils.import_module(".".join(backend[:-1])), backend[-1])

    backend_config = utils.import_file(options.backend_config)
    bc_keys = filter(lambda x: not x.startswith("__"), dir(backend_config))
    backend_config = dict([(key, getattr(backend_config, key)) for key in bc_keys])

    backend = backendClass(backendConfig = backend_config, outdir = options.outputdir)
    backend.generateCode(nodes)


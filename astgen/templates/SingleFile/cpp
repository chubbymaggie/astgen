
#ifndef __{{templateData.NAMESPACE}}__GENERATED_AST_NODES_H__
#define __{{templateData.NAMESPACE}}__GENERATED_AST_NODES_H__

{{templateData.INITIAL_HEADERS}}

#if defined(_cplusplus) || defined(__cplusplus)
extern "C" {
#endif

{{templateData.PREAMBLE}}

{% if templateData.NAMESPACE %}
namespace {{templateData.NAMESPACE}} {
{% endif %}

// Foward defs
{% for node in nodes %}
class {{node.getNodeName()}};
typedef {{node.getNodeName()}} *{{node.getNodeName()}}Ptr; {% endfor %}

{% for node in nodes %}

class {{node.getNodeName()}} {% if node.getParentNode() %}: public {{ node.getParentNode() }}{% endif %}
{
public:
    {% for method in node.getConstructorsFor(attrib) %}
    {% endfor %}
    virtual ~{{node.getNodeName()}}() { }
    {% for attrib, value in node.attributes.iteritems() %}
        {% for getter in node.getGettersFor(attrib) %}
            templateData.getType({{getter.returnType}}) {{getter.methodName}}({% for arg in getter.arguments %}{%endfor%})
            {
                {{getter.methodBody}}
            }
        {% endfor %}
        {% for settern in node.getSettersFor(attrib) %}
            templateData.getType({{setter.returnType}}) {{setter.methodName}}() { return this->{{attrib}}; }
            templateData.getType(void set{{attrib[0]|upper}}{{attrib[1:]}}(const {{templateData.getType(value)}} &value)
            {
                {{getter.methodBody}}
            }
        {% endfor %}
    {% endfor
{% endfor %}
{% if node.attributes %}
protected:
    {% for attrib, value in node.attributes.iteritems() %}
    {{templateData.getType(value)}} {{attrib}};{% endfor %}
{% endif %}
};{% endfor %}

{% if templateData.NAMESPACE %}
}
{% endif %}

#if defined(_cplusplus) || defined(__cplusplus)
}
#endif

#endif


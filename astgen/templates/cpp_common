
{% macro ifndef_define(prefix = '', suffix = '') -%}
#ifndef __{{prefix}}__{{suffix}}__
#define __{{prefix}}__{{suffix}}__
{%- endmacro %}

{% macro start_externc() -%}
#if defined(_cplusplus) || defined(__cplusplus)
extern "C" {
#endif
{%- endmacro %}

{% macro end_externc() -%}
#if defined(_cplusplus) || defined(__cplusplus)
}
#endif
{%- endmacro %}

{% macro start_namespace(ns) -%}
{% if ns %}namespace {{ns}} { {% endif %}
{%- endmacro %}

{% macro end_namespace(ns) -%}
{% if ns %}} {% endif %}
{%- endmacro %}

{% macro render_enum(enumtype) -%}
enum class {{enumtype.enum_name}} {
    {% for m in enumtype.enum_vals %}
    {{ m }},
    {% endfor %}
};
{%- endmacro %}

{% macro render_destructor(node, withscope = False) -%}
{% if no_implementation %}
    virtual ~{{node.getNodeName()}}();
{% else -%}
{% if not node.no_destructor -%}
    {% if withscope %}{{node.getNodeName()}}::{%else%}virtual {% endif %}~{{node.getNodeName()}}() { }
{%- endif %}
{%- endif %}
{%- endmacro %}

{% macro render_property_getter(node, prop_name, prop_type, withscope = False) -%}
{% if prop_type.__class__.__name__ == "UnionType" -%}
    {% for uname, utype in prop_type.members.iteritems() %}
    {% if no_implementation -%}
        const {{platform.getType(utype)}} &get{{camel_case(prop_name)}}_{{camel_case(uname)}}();
    {% else -%}
        const {{platform.getType(utype)}} &{% if withscope %}{{node.getNodeName()}}::{%endif%}get{{camel_case(prop_name)}}_{{camel_case(uname)}}()
        {
            return this->{{prop_name}}.{{uname}};
        }
    {%- endif %}
    {% endfor %}
{% else %}
    {% if no_implementation -%}
        const {{platform.getType(prop_type)}} &get{{camel_case(prop_name)}}();
    {% else -%}
        const {{platform.getType(prop_type)}} &{% if withscope %}{{node.getNodeName()}}::{%endif%}get{{camel_case(prop_name)}}()
        {
            return this->{{prop_name}};
        }
    {%- endif %}
{%- endif %}
{%- endmacro %}

{% macro render_property_setter(node, prop_name, prop_type, withscope = False) -%}
{% if prop_type.__class__.__name__ == "UnionType" -%}
    {% for uname, utype in prop_type.members.iteritems() %}
    {% if no_implementation -%}
        void set{{camel_case(prop_name)}}_{{camel_case(uname)}}(const {{platform.getType(utype)}} &value);
    {% else -%}
        void {% if withscope %}{{node.getNodeName()}}::{%endif%}set{{camel_case(prop_name)}}_{{camel_case(uname)}}(const {{platform.getType(utype)}} &value)
        {
            this->{{prop_name}}.{{uname}} = value;
        }
    {%- endif %}
    {% endfor %}
{% else %}
    {% if no_implementation -%}
        void set{{camel_case(prop_name)}}(const {{platform.getType(prop_type)}} &value);
    {% else -%}
        void {% if withscope %}{{node.getNodeName()}}::{%endif%}set{{camel_case(prop_name)}}(const {{platform.getType(prop_type)}} &value)
        {
            this->{{prop_name}} = value;
        }
    {% endif -%}
{% endif -%}
{%- endmacro %}

{% macro camel_case(value) -%}{{value[0]|upper}}{{value[1:]}}{%- endmacro %}

{% macro render_property_declaration(node, prop_name, prop_type) -%}
{% if prop_type.__class__.__name__ == "UnionType" %}
union {
    {% for uname, utype in prop_type.members.iteritems() %}
        {{platform.getType(utype)}} {{uname}};
    {% endfor %}
    } {{prop_name}};
{% else %}
{{platform.getType(prop_type)}} {{prop_name}};
{% endif %}
{%- endmacro %}


{% macro render_node_class(node) -%}
class {{node.getNodeName()}} {% if node.getParentNode() %}: public {{ node.getParentNode() }}{% endif %}
{
public:
    {{ render_destructor(node) }}
    {% for prop_name, prop_type in node.properties.iteritems() %}
    {{ render_property_getter(node, prop_name, prop_type) }}
    {{ render_property_setter(node, prop_name, prop_type) }}
    {% endfor %}
{% if node.properties %}

protected:
    {% for prop_name, prop_type in node.properties.iteritems() %}
    {{ render_property_declaration(node, prop_name, prop_type)  }}
    {% endfor %}
{% endif %}
};
{%- endmacro %}
